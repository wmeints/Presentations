/*
Deployment script for RecipeBrowser

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "RecipeBrowser"
:setvar DefaultFilePrefix "RecipeBrowser"
:setvar DefaultDataPath "D:\SQL Server\Databases\"
:setvar DefaultLogPath "D:\SQL Server\Databases\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CS_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [dbo].[Category]...';


GO
CREATE TABLE [dbo].[Category] (
    [CategoryId]         DECIMAL (18)    IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (50)   NOT NULL,
    [Image]              VARBINARY (MAX) NULL,
    [IsMenuCourse]       BIT             NOT NULL,
    [IsKitchenType]      BIT             NOT NULL,
    [IsCookingTechnique] BIT             NOT NULL,
    [IsTheme]            BIT             NOT NULL,
    [DateCreated]        DATETIME        NOT NULL,
    [DateModified]       DATETIME        NULL,
    [CreatedBy]          NVARCHAR (50)   NOT NULL,
    [ModifiedBy]         NVARCHAR (50)   NULL,
    [Version]            TIMESTAMP       NOT NULL,
    CONSTRAINT [PK_Category] PRIMARY KEY CLUSTERED ([CategoryId] ASC)
);


GO
PRINT N'Creating [dbo].[Comment]...';


GO
CREATE TABLE [dbo].[Comment] (
    [CommentId]    DECIMAL (18)   IDENTITY (1, 1) NOT NULL,
    [RecipeId]     DECIMAL (18)   NOT NULL,
    [CommentText]  NVARCHAR (MAX) NOT NULL,
    [DateCreated]  DATETIME       NOT NULL,
    [DateModified] DATETIME       NULL,
    [CreatedBy]    NVARCHAR (50)  NOT NULL,
    [ModifiedBy]   NVARCHAR (50)  NULL,
    [Version]      TIMESTAMP      NOT NULL,
    CONSTRAINT [PK_Comment] PRIMARY KEY CLUSTERED ([CommentId] ASC)
);


GO
PRINT N'Creating [dbo].[Ingredient]...';


GO
CREATE TABLE [dbo].[Ingredient] (
    [IngredientId] DECIMAL (18)   IDENTITY (1, 1) NOT NULL,
    [RecipeId]     DECIMAL (18)   NOT NULL,
    [Name]         NVARCHAR (250) NOT NULL,
    [Description]  NVARCHAR (MAX) NULL,
    [Amount]       DECIMAL (18)   NULL,
    [UnitId]       DECIMAL (18)   NULL,
    [Version]      TIMESTAMP      NOT NULL,
    CONSTRAINT [PK_Ingredient] PRIMARY KEY CLUSTERED ([IngredientId] ASC)
);


GO
PRINT N'Creating [dbo].[Ingredient].[IX_Ingredient_RecipeId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Ingredient_RecipeId]
    ON [dbo].[Ingredient]([RecipeId] ASC);


GO
PRINT N'Creating [dbo].[Recipe]...';


GO
CREATE TABLE [dbo].[Recipe] (
    [RecipeId]            DECIMAL (18)    IDENTITY (1, 1) NOT NULL,
    [Name]                NVARCHAR (250)  NOT NULL,
    [Description]         NVARCHAR (MAX)  NOT NULL,
    [Image]               VARBINARY (50)  NULL,
    [Rating]              DECIMAL (18, 2) NOT NULL,
    [CookingInstructions] NVARCHAR (MAX)  NOT NULL,
    [TimeNeeded]          TIME (7)        NOT NULL,
    [DateCreated]         DATETIME        NOT NULL,
    [DateModified]        DATETIME        NULL,
    [CreatedBy]           NVARCHAR (50)   NOT NULL,
    [ModifiedBy]          NVARCHAR (50)   NULL,
    [Version]             TIMESTAMP       NOT NULL,
    CONSTRAINT [PK_Recipe] PRIMARY KEY CLUSTERED ([RecipeId] ASC)
);


GO
PRINT N'Creating [dbo].[RecipeCategory]...';


GO
CREATE TABLE [dbo].[RecipeCategory] (
    [RecipeId]   DECIMAL (18) NOT NULL,
    [CategoryId] DECIMAL (18) NOT NULL,
    CONSTRAINT [PK_RecipeCategory] PRIMARY KEY CLUSTERED ([RecipeId] ASC, [CategoryId] ASC)
);


GO
PRINT N'Creating [dbo].[Unit]...';


GO
CREATE TABLE [dbo].[Unit] (
    [UnitId]       DECIMAL (18)   IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (250) NOT NULL,
    [DateCreated]  DATETIME       NOT NULL,
    [DateModified] DATETIME       NULL,
    [CreatedBy]    NVARCHAR (50)  NOT NULL,
    [ModifiedBy]   NVARCHAR (50)  NULL,
    [Version]      TIMESTAMP      NOT NULL,
    CONSTRAINT [PK_Unit] PRIMARY KEY CLUSTERED ([UnitId] ASC)
);


GO
PRINT N'Creating FK_Comment_Recipe...';


GO
ALTER TABLE [dbo].[Comment]
    ADD CONSTRAINT [FK_Comment_Recipe] FOREIGN KEY ([RecipeId]) REFERENCES [dbo].[Recipe] ([RecipeId]);


GO
PRINT N'Creating FK_Ingredient_Recipe...';


GO
ALTER TABLE [dbo].[Ingredient]
    ADD CONSTRAINT [FK_Ingredient_Recipe] FOREIGN KEY ([RecipeId]) REFERENCES [dbo].[Recipe] ([RecipeId]);


GO
PRINT N'Creating FK_Ingredient_Unit...';


GO
ALTER TABLE [dbo].[Ingredient]
    ADD CONSTRAINT [FK_Ingredient_Unit] FOREIGN KEY ([UnitId]) REFERENCES [dbo].[Unit] ([UnitId]);


GO
PRINT N'Creating FK_RecipeCategory_Category...';


GO
ALTER TABLE [dbo].[RecipeCategory]
    ADD CONSTRAINT [FK_RecipeCategory_Category] FOREIGN KEY ([CategoryId]) REFERENCES [dbo].[Category] ([CategoryId]);


GO
PRINT N'Creating FK_RecipeCategory_Recipe...';


GO
ALTER TABLE [dbo].[RecipeCategory]
    ADD CONSTRAINT [FK_RecipeCategory_Recipe] FOREIGN KEY ([RecipeId]) REFERENCES [dbo].[Recipe] ([RecipeId]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

DELETE FROM Ingredient
DELETE FROM RecipeCategory
DELETE FROM Recipe
DELETE FROM Category
DELETE FROM Unit
GO

SET IDENTITY_INSERT [dbo].[Category] ON
GO

INSERT INTO [Category]
           ([CategoryId],[Name],[Image],[IsMenuCourse],[IsKitchenType],[IsCookingTechnique]
           ,[IsTheme],[DateCreated],[DateModified],[CreatedBy],[ModifiedBy])
     VALUES (1,'Voorgerecht',0x0,1,0,0,0,GETDATE(),null,'willemm',null)

INSERT INTO [Category]
           ([CategoryId],[Name],[Image],[IsMenuCourse],[IsKitchenType],[IsCookingTechnique]
           ,[IsTheme],[DateCreated],[DateModified],[CreatedBy],[ModifiedBy])
     VALUES (2,'Tussengerecht',0x0,1,0,0,0,GETDATE(),null,'willemm',null)

INSERT INTO [Category]
           ([CategoryId],[Name],[Image],[IsMenuCourse],[IsKitchenType],[IsCookingTechnique]
           ,[IsTheme],[DateCreated],[DateModified],[CreatedBy],[ModifiedBy])
     VALUES (3,'Hoofdgerecht',0x0,1,0,0,0,GETDATE(),null,'willemm',null)

INSERT INTO [Category]
           ([CategoryId],[Name],[Image],[IsMenuCourse],[IsKitchenType],[IsCookingTechnique]
           ,[IsTheme],[DateCreated],[DateModified],[CreatedBy],[ModifiedBy])
     VALUES (4,'Nagerecht',0x0,1,0,0,0,GETDATE(),null,'willemm',null)
GO

SET IDENTITY_INSERT [Category] OFF
GO

SET IDENTITY_INSERT [Unit] ON
GO

INSERT INTO [Unit] ([UnitId],[Name],[DateCreated],[DateModified],[CreatedBy],[ModifiedBy]) VALUES (1,'gram',GETDATE(),null,'willemm',null)
INSERT INTO [Unit] ([UnitId],[Name],[DateCreated],[DateModified],[CreatedBy],[ModifiedBy]) VALUES (2,'ml',GETDATE(),null,'willemm',null)
INSERT INTO [Unit] ([UnitId],[Name],[DateCreated],[DateModified],[CreatedBy],[ModifiedBy]) VALUES (3,'stuks',GETDATE(),null,'willemm',null)
INSERT INTO [Unit] ([UnitId],[Name],[DateCreated],[DateModified],[CreatedBy],[ModifiedBy]) VALUES (4,'kg',GETDATE(),null,'willemm',null)
INSERT INTO [Unit] ([UnitId],[Name],[DateCreated],[DateModified],[CreatedBy],[ModifiedBy]) VALUES (5,'dl',GETDATE(),null,'willemm',null)
INSERT INTO [Unit] ([UnitId],[Name],[DateCreated],[DateModified],[CreatedBy],[ModifiedBy]) VALUES (6,'eetlepels',GETDATE(),null,'willemm',null)
GO

SET IDENTITY_INSERT [Unit] OFF
GO

SET IDENTITY_INSERT [Recipe] ON
GO

INSERT INTO [Recipe]
           (RecipeId
		   ,[Name]
           ,[Description]
           ,[Image]
           ,[Rating]
           ,[CookingInstructions]
           ,[TimeNeeded]
           ,[DateCreated]
           ,[DateModified]
           ,[CreatedBy]
           ,[ModifiedBy])
     VALUES
           (1
		   ,'Stamppot'
           ,'Een oerhollandse stamppot'
           ,0x0
           ,5
           ,'Giet een laagje water van ca. 4 cm in een pan. Voeg er de aardappels met wat zout aan toe en breng aan de kook. Leg, zodra de aardappels koken, de boerenkool erop en de rookworst. Draai het vuur lager en kook de aardappels en groenten - met het deksel op de op pan - in circa 15-20 minuten gaar. Prik in de aardappels om te voelen of ze zacht zijn. Bak intussen in een droge koekenpan de spekblokjes uit. Giet het kookvocht af. Stamp de aardappels en de boerenkool door elkaar met een stamper. Roer de boter erdoor en maak de stamppot wat smeuiger met de warme melk. Schep er de spekblokjes door en breng de stamppot op smaak met zout en peper en een scheutje azijn. Serveer de stamppot met de rookworst.'
           ,'00:30'
           ,GETDATE()
           ,null
           ,'willemm'
           ,null)
GO

SET IDENTITY_INSERT [Recipe] OFF
GO

INSERT INTO [Ingredient]([RecipeId],[Name],[Description],[Amount],[UnitId])VALUES(1,'Aardappelen',null,1,4)
INSERT INTO [Ingredient]([RecipeId],[Name],[Description],[Amount],[UnitId])VALUES(1,'Boerenkool',null,500,1)
INSERT INTO [Ingredient]([RecipeId],[Name],[Description],[Amount],[UnitId])VALUES(1,'Rookworst',null,1,null)
INSERT INTO [Ingredient]([RecipeId],[Name],[Description],[Amount],[UnitId])VALUES(1,'Magere spekblokjes',null,100,1)
INSERT INTO [Ingredient]([RecipeId],[Name],[Description],[Amount],[UnitId])VALUES(1,'Zout',null,null,null)
INSERT INTO [Ingredient]([RecipeId],[Name],[Description],[Amount],[UnitId])VALUES(1,'Peper',null,null,null)
INSERT INTO [Ingredient]([RecipeId],[Name],[Description],[Amount],[UnitId])VALUES(1,'Boter',null,20,1)
INSERT INTO [Ingredient]([RecipeId],[Name],[Description],[Amount],[UnitId])VALUES(1,'Melk',null,1.5,5)
INSERT INTO [Ingredient]([RecipeId],[Name],[Description],[Amount],[UnitId])VALUES(1,'Azijn',null,2,6)
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.'
GO
